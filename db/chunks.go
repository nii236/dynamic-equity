// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Chunk is an object representing the database table.
type Chunk struct {
	ID       int         `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID   int         `db:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	PieID    null.Int    `db:"pie_id" boil:"pie_id" json:"pie_id,omitempty" toml:"pie_id" yaml:"pie_id,omitempty"`
	Amount   int         `db:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Approved bool        `db:"approved" boil:"approved" json:"approved" toml:"approved" yaml:"approved"`
	Archived bool        `db:"archived" boil:"archived" json:"archived" toml:"archived" yaml:"archived"`
	Comment  null.String `db:"comment" boil:"comment" json:"comment,omitempty" toml:"comment" yaml:"comment,omitempty"`

	R *chunkR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L chunkL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChunkColumns = struct {
	ID       string
	UserID   string
	PieID    string
	Amount   string
	Approved string
	Archived string
	Comment  string
}{
	ID:       "id",
	UserID:   "user_id",
	PieID:    "pie_id",
	Amount:   "amount",
	Approved: "approved",
	Archived: "archived",
	Comment:  "comment",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ChunkWhere = struct {
	ID       whereHelperint
	UserID   whereHelperint
	PieID    whereHelpernull_Int
	Amount   whereHelperint
	Approved whereHelperbool
	Archived whereHelperbool
	Comment  whereHelpernull_String
}{
	ID:       whereHelperint{field: `id`},
	UserID:   whereHelperint{field: `user_id`},
	PieID:    whereHelpernull_Int{field: `pie_id`},
	Amount:   whereHelperint{field: `amount`},
	Approved: whereHelperbool{field: `approved`},
	Archived: whereHelperbool{field: `archived`},
	Comment:  whereHelpernull_String{field: `comment`},
}

// ChunkRels is where relationship names are stored.
var ChunkRels = struct {
	User string
	Pie  string
}{
	User: "User",
	Pie:  "Pie",
}

// chunkR is where relationships are stored.
type chunkR struct {
	User *User
	Pie  *Pie
}

// NewStruct creates a new relationship struct
func (*chunkR) NewStruct() *chunkR {
	return &chunkR{}
}

// chunkL is where Load methods for each relationship are stored.
type chunkL struct{}

var (
	chunkColumns               = []string{"id", "user_id", "pie_id", "amount", "approved", "archived", "comment"}
	chunkColumnsWithoutDefault = []string{"user_id", "pie_id", "amount", "approved", "archived", "comment"}
	chunkColumnsWithDefault    = []string{"id"}
	chunkPrimaryKeyColumns     = []string{"id"}
)

type (
	// ChunkSlice is an alias for a slice of pointers to Chunk.
	// This should generally be used opposed to []Chunk.
	ChunkSlice []*Chunk
	// ChunkHook is the signature for custom Chunk hook methods
	ChunkHook func(boil.Executor, *Chunk) error

	chunkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chunkType                 = reflect.TypeOf(&Chunk{})
	chunkMapping              = queries.MakeStructMapping(chunkType)
	chunkPrimaryKeyMapping, _ = queries.BindMapping(chunkType, chunkMapping, chunkPrimaryKeyColumns)
	chunkInsertCacheMut       sync.RWMutex
	chunkInsertCache          = make(map[string]insertCache)
	chunkUpdateCacheMut       sync.RWMutex
	chunkUpdateCache          = make(map[string]updateCache)
	chunkUpsertCacheMut       sync.RWMutex
	chunkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chunkBeforeInsertHooks []ChunkHook
var chunkBeforeUpdateHooks []ChunkHook
var chunkBeforeDeleteHooks []ChunkHook
var chunkBeforeUpsertHooks []ChunkHook

var chunkAfterInsertHooks []ChunkHook
var chunkAfterSelectHooks []ChunkHook
var chunkAfterUpdateHooks []ChunkHook
var chunkAfterDeleteHooks []ChunkHook
var chunkAfterUpsertHooks []ChunkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Chunk) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chunkBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Chunk) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chunkBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Chunk) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chunkBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Chunk) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chunkBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Chunk) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chunkAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Chunk) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range chunkAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Chunk) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chunkAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Chunk) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chunkAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Chunk) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chunkAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChunkHook registers your hook function for all future operations.
func AddChunkHook(hookPoint boil.HookPoint, chunkHook ChunkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		chunkBeforeInsertHooks = append(chunkBeforeInsertHooks, chunkHook)
	case boil.BeforeUpdateHook:
		chunkBeforeUpdateHooks = append(chunkBeforeUpdateHooks, chunkHook)
	case boil.BeforeDeleteHook:
		chunkBeforeDeleteHooks = append(chunkBeforeDeleteHooks, chunkHook)
	case boil.BeforeUpsertHook:
		chunkBeforeUpsertHooks = append(chunkBeforeUpsertHooks, chunkHook)
	case boil.AfterInsertHook:
		chunkAfterInsertHooks = append(chunkAfterInsertHooks, chunkHook)
	case boil.AfterSelectHook:
		chunkAfterSelectHooks = append(chunkAfterSelectHooks, chunkHook)
	case boil.AfterUpdateHook:
		chunkAfterUpdateHooks = append(chunkAfterUpdateHooks, chunkHook)
	case boil.AfterDeleteHook:
		chunkAfterDeleteHooks = append(chunkAfterDeleteHooks, chunkHook)
	case boil.AfterUpsertHook:
		chunkAfterUpsertHooks = append(chunkAfterUpsertHooks, chunkHook)
	}
}

// One returns a single chunk record from the query.
func (q chunkQuery) One(exec boil.Executor) (*Chunk, error) {
	o := &Chunk{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for chunks")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Chunk records from the query.
func (q chunkQuery) All(exec boil.Executor) (ChunkSlice, error) {
	var o []*Chunk

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Chunk slice")
	}

	if len(chunkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Chunk records in the query.
func (q chunkQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count chunks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chunkQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if chunks exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Chunk) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Pie pointed to by the foreign key.
func (o *Chunk) Pie(mods ...qm.QueryMod) pieQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PieID),
	}

	queryMods = append(queryMods, mods...)

	query := Pies(queryMods...)
	queries.SetFrom(query.Query, "\"pies\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chunkL) LoadUser(e boil.Executor, singular bool, maybeChunk interface{}, mods queries.Applicator) error {
	var slice []*Chunk
	var object *Chunk

	if singular {
		object = maybeChunk.(*Chunk)
	} else {
		slice = *maybeChunk.(*[]*Chunk)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chunkR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chunkR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(chunkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Chunks = append(foreign.R.Chunks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Chunks = append(foreign.R.Chunks, local)
				break
			}
		}
	}

	return nil
}

// LoadPie allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chunkL) LoadPie(e boil.Executor, singular bool, maybeChunk interface{}, mods queries.Applicator) error {
	var slice []*Chunk
	var object *Chunk

	if singular {
		object = maybeChunk.(*Chunk)
	} else {
		slice = *maybeChunk.(*[]*Chunk)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chunkR{}
		}
		if !queries.IsNil(object.PieID) {
			args = append(args, object.PieID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chunkR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PieID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PieID) {
				args = append(args, obj.PieID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`pies`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pie")
	}

	var resultSlice []*Pie
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pie")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pies")
	}

	if len(chunkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pie = foreign
		if foreign.R == nil {
			foreign.R = &pieR{}
		}
		foreign.R.PieChunks = append(foreign.R.PieChunks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PieID, foreign.ID) {
				local.R.Pie = foreign
				if foreign.R == nil {
					foreign.R = &pieR{}
				}
				foreign.R.PieChunks = append(foreign.R.PieChunks, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the chunk to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Chunks.
func (o *Chunk) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chunks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, chunkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &chunkR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Chunks: ChunkSlice{o},
		}
	} else {
		related.R.Chunks = append(related.R.Chunks, o)
	}

	return nil
}

// SetPie of the chunk to the related item.
// Sets o.R.Pie to related.
// Adds o to related.R.PieChunks.
func (o *Chunk) SetPie(exec boil.Executor, insert bool, related *Pie) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chunks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pie_id"}),
		strmangle.WhereClause("\"", "\"", 2, chunkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PieID, related.ID)
	if o.R == nil {
		o.R = &chunkR{
			Pie: related,
		}
	} else {
		o.R.Pie = related
	}

	if related.R == nil {
		related.R = &pieR{
			PieChunks: ChunkSlice{o},
		}
	} else {
		related.R.PieChunks = append(related.R.PieChunks, o)
	}

	return nil
}

// RemovePie relationship.
// Sets o.R.Pie to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Chunk) RemovePie(exec boil.Executor, related *Pie) error {
	var err error

	queries.SetScanner(&o.PieID, nil)
	if _, err = o.Update(exec, boil.Whitelist("pie_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Pie = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PieChunks {
		if queries.Equal(o.PieID, ri.PieID) {
			continue
		}

		ln := len(related.R.PieChunks)
		if ln > 1 && i < ln-1 {
			related.R.PieChunks[i] = related.R.PieChunks[ln-1]
		}
		related.R.PieChunks = related.R.PieChunks[:ln-1]
		break
	}
	return nil
}

// Chunks retrieves all the records using an executor.
func Chunks(mods ...qm.QueryMod) chunkQuery {
	mods = append(mods, qm.From("\"chunks\""))
	return chunkQuery{NewQuery(mods...)}
}

// FindChunk retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChunk(exec boil.Executor, iD int, selectCols ...string) (*Chunk, error) {
	chunkObj := &Chunk{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chunks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, chunkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from chunks")
	}

	return chunkObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Chunk) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no chunks provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chunkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chunkInsertCacheMut.RLock()
	cache, cached := chunkInsertCache[key]
	chunkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chunkColumns,
			chunkColumnsWithDefault,
			chunkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chunkType, chunkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chunkType, chunkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chunks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chunks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into chunks")
	}

	if !cached {
		chunkInsertCacheMut.Lock()
		chunkInsertCache[key] = cache
		chunkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Chunk.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Chunk) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chunkUpdateCacheMut.RLock()
	cache, cached := chunkUpdateCache[key]
	chunkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chunkColumns,
			chunkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update chunks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chunks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chunkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chunkType, chunkMapping, append(wl, chunkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update chunks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for chunks")
	}

	if !cached {
		chunkUpdateCacheMut.Lock()
		chunkUpdateCache[key] = cache
		chunkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chunkQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for chunks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for chunks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChunkSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chunkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chunks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chunkPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in chunk slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all chunk")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Chunk) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no chunks provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chunkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chunkUpsertCacheMut.RLock()
	cache, cached := chunkUpsertCache[key]
	chunkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chunkColumns,
			chunkColumnsWithDefault,
			chunkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chunkColumns,
			chunkPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert chunks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chunkPrimaryKeyColumns))
			copy(conflict, chunkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chunks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chunkType, chunkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chunkType, chunkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert chunks")
	}

	if !cached {
		chunkUpsertCacheMut.Lock()
		chunkUpsertCache[key] = cache
		chunkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Chunk record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Chunk) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Chunk provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chunkPrimaryKeyMapping)
	sql := "DELETE FROM \"chunks\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from chunks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for chunks")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chunkQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no chunkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from chunks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for chunks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChunkSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Chunk slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(chunkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chunkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chunks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chunkPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from chunk slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for chunks")
	}

	if len(chunkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Chunk) Reload(exec boil.Executor) error {
	ret, err := FindChunk(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChunkSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChunkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chunkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chunks\".* FROM \"chunks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chunkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in ChunkSlice")
	}

	*o = slice

	return nil
}

// ChunkExists checks if the Chunk row exists.
func ChunkExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chunks\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if chunks exists")
	}

	return exists, nil
}
