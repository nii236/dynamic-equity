// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPies(t *testing.T) {
	t.Parallel()

	query := Pies()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pies().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Pies().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pies().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PieSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pies().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PieExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Pie exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PieExists to return true, but got false.")
	}
}

func testPiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pieFound, err := FindPie(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if pieFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Pies().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testPiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Pies().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pieOne := &Pie{}
	pieTwo := &Pie{}
	if err = randomize.Struct(seed, pieOne, pieDBTypes, false, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}
	if err = randomize.Struct(seed, pieTwo, pieDBTypes, false, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = pieOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pieTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pies().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pieOne := &Pie{}
	pieTwo := &Pie{}
	if err = randomize.Struct(seed, pieOne, pieDBTypes, false, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}
	if err = randomize.Struct(seed, pieTwo, pieDBTypes, false, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = pieOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pieTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pies().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pieBeforeInsertHook(e boil.Executor, o *Pie) error {
	*o = Pie{}
	return nil
}

func pieAfterInsertHook(e boil.Executor, o *Pie) error {
	*o = Pie{}
	return nil
}

func pieAfterSelectHook(e boil.Executor, o *Pie) error {
	*o = Pie{}
	return nil
}

func pieBeforeUpdateHook(e boil.Executor, o *Pie) error {
	*o = Pie{}
	return nil
}

func pieAfterUpdateHook(e boil.Executor, o *Pie) error {
	*o = Pie{}
	return nil
}

func pieBeforeDeleteHook(e boil.Executor, o *Pie) error {
	*o = Pie{}
	return nil
}

func pieAfterDeleteHook(e boil.Executor, o *Pie) error {
	*o = Pie{}
	return nil
}

func pieBeforeUpsertHook(e boil.Executor, o *Pie) error {
	*o = Pie{}
	return nil
}

func pieAfterUpsertHook(e boil.Executor, o *Pie) error {
	*o = Pie{}
	return nil
}

func testPiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Pie{}
	o := &Pie{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pieDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Pie object: %s", err)
	}

	AddPieHook(boil.BeforeInsertHook, pieBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pieBeforeInsertHooks = []PieHook{}

	AddPieHook(boil.AfterInsertHook, pieAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pieAfterInsertHooks = []PieHook{}

	AddPieHook(boil.AfterSelectHook, pieAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pieAfterSelectHooks = []PieHook{}

	AddPieHook(boil.BeforeUpdateHook, pieBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pieBeforeUpdateHooks = []PieHook{}

	AddPieHook(boil.AfterUpdateHook, pieAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pieAfterUpdateHooks = []PieHook{}

	AddPieHook(boil.BeforeDeleteHook, pieBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pieBeforeDeleteHooks = []PieHook{}

	AddPieHook(boil.AfterDeleteHook, pieAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pieAfterDeleteHooks = []PieHook{}

	AddPieHook(boil.BeforeUpsertHook, pieBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pieBeforeUpsertHooks = []PieHook{}

	AddPieHook(boil.AfterUpsertHook, pieAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pieAfterUpsertHooks = []PieHook{}
}

func testPiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pies().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(pieColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Pies().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPieToManyPieChunks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Pie
	var b, c Chunk

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, chunkDBTypes, false, chunkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chunkDBTypes, false, chunkColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PieID, a.ID)
	queries.Assign(&c.PieID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PieChunks().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PieID, b.PieID) {
			bFound = true
		}
		if queries.Equal(v.PieID, c.PieID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PieSlice{&a}
	if err = a.L.LoadPieChunks(tx, false, (*[]*Pie)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PieChunks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PieChunks = nil
	if err = a.L.LoadPieChunks(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PieChunks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPieToManyUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Pie
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"pies_users\" (\"pie_id\", \"user_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"pies_users\" (\"pie_id\", \"user_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Users().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PieSlice{&a}
	if err = a.L.LoadUsers(tx, false, (*[]*Pie)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Users = nil
	if err = a.L.LoadUsers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Users); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPieToManyPieProjects(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Pie
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PieID, a.ID)
	queries.Assign(&c.PieID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PieProjects().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PieID, b.PieID) {
			bFound = true
		}
		if queries.Equal(v.PieID, c.PieID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PieSlice{&a}
	if err = a.L.LoadPieProjects(tx, false, (*[]*Pie)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PieProjects); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PieProjects = nil
	if err = a.L.LoadPieProjects(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PieProjects); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPieToManyAddOpPieChunks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Pie
	var b, c, d, e Chunk

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pieDBTypes, false, strmangle.SetComplement(piePrimaryKeyColumns, pieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Chunk{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chunkDBTypes, false, strmangle.SetComplement(chunkPrimaryKeyColumns, chunkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Chunk{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPieChunks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PieID) {
			t.Error("foreign key was wrong value", a.ID, first.PieID)
		}
		if !queries.Equal(a.ID, second.PieID) {
			t.Error("foreign key was wrong value", a.ID, second.PieID)
		}

		if first.R.Pie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PieChunks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PieChunks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PieChunks().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPieToManySetOpPieChunks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Pie
	var b, c, d, e Chunk

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pieDBTypes, false, strmangle.SetComplement(piePrimaryKeyColumns, pieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Chunk{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chunkDBTypes, false, strmangle.SetComplement(chunkPrimaryKeyColumns, chunkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPieChunks(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PieChunks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPieChunks(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PieChunks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PieID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PieID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PieID) {
		t.Error("foreign key was wrong value", a.ID, d.PieID)
	}
	if !queries.Equal(a.ID, e.PieID) {
		t.Error("foreign key was wrong value", a.ID, e.PieID)
	}

	if b.R.Pie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Pie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PieChunks[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PieChunks[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPieToManyRemoveOpPieChunks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Pie
	var b, c, d, e Chunk

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pieDBTypes, false, strmangle.SetComplement(piePrimaryKeyColumns, pieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Chunk{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chunkDBTypes, false, strmangle.SetComplement(chunkPrimaryKeyColumns, chunkColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPieChunks(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PieChunks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePieChunks(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PieChunks().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PieID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PieID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Pie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pie != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Pie != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PieChunks) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PieChunks[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PieChunks[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPieToManyAddOpUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Pie
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pieDBTypes, false, strmangle.SetComplement(piePrimaryKeyColumns, pieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUsers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.PiePies[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.PiePies[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Users[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Users[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Users().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPieToManySetOpUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Pie
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pieDBTypes, false, strmangle.SetComplement(piePrimaryKeyColumns, pieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUsers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Users().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUsers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Users().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.PiePies) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.PiePies) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.PiePies[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.PiePies[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Users[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Users[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPieToManyRemoveOpUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Pie
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pieDBTypes, false, strmangle.SetComplement(piePrimaryKeyColumns, pieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUsers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Users().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUsers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Users().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.PiePies) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.PiePies) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.PiePies[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.PiePies[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Users) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Users[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Users[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPieToManyAddOpPieProjects(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Pie
	var b, c, d, e Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pieDBTypes, false, strmangle.SetComplement(piePrimaryKeyColumns, pieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Project{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Project{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPieProjects(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PieID) {
			t.Error("foreign key was wrong value", a.ID, first.PieID)
		}
		if !queries.Equal(a.ID, second.PieID) {
			t.Error("foreign key was wrong value", a.ID, second.PieID)
		}

		if first.R.Pie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Pie != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PieProjects[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PieProjects[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PieProjects().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPieToManySetOpPieProjects(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Pie
	var b, c, d, e Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pieDBTypes, false, strmangle.SetComplement(piePrimaryKeyColumns, pieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Project{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPieProjects(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PieProjects().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPieProjects(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PieProjects().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PieID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PieID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PieID) {
		t.Error("foreign key was wrong value", a.ID, d.PieID)
	}
	if !queries.Equal(a.ID, e.PieID) {
		t.Error("foreign key was wrong value", a.ID, e.PieID)
	}

	if b.R.Pie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Pie != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PieProjects[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PieProjects[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPieToManyRemoveOpPieProjects(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Pie
	var b, c, d, e Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pieDBTypes, false, strmangle.SetComplement(piePrimaryKeyColumns, pieColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Project{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPieProjects(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PieProjects().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePieProjects(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PieProjects().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PieID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PieID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Pie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Pie != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Pie != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Pie != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PieProjects) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PieProjects[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PieProjects[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PieSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testPiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pies().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pieDBTypes = map[string]string{`ID`: `integer`, `Currency`: `integer`, `NonCashMultiplier`: `integer`, `CashMultiplier`: `integer`, `CommissionRatePercent`: `integer`, `RoyaltyRatePercent`: `integer`, `FindersFeePercent`: `integer`}
	_          = bytes.MinRead
)

func testPiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(piePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pieColumns) == len(piePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pies().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pieDBTypes, true, piePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pieColumns) == len(piePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Pie{}
	if err = randomize.Struct(seed, o, pieDBTypes, true, pieColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pies().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pieDBTypes, true, piePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pieColumns, piePrimaryKeyColumns) {
		fields = pieColumns
	} else {
		fields = strmangle.SetComplement(
			pieColumns,
			piePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PieSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPiesUpsert(t *testing.T) {
	t.Parallel()

	if len(pieColumns) == len(piePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Pie{}
	if err = randomize.Struct(seed, &o, pieDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Pie: %s", err)
	}

	count, err := Pies().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pieDBTypes, false, piePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Pie struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Pie: %s", err)
	}

	count, err = Pies().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
