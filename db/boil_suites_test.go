// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Chunks", testChunks)
	t.Run("Pies", testPies)
	t.Run("Projects", testProjects)
	t.Run("Roles", testRoles)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Chunks", testChunksDelete)
	t.Run("Pies", testPiesDelete)
	t.Run("Projects", testProjectsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Chunks", testChunksQueryDeleteAll)
	t.Run("Pies", testPiesQueryDeleteAll)
	t.Run("Projects", testProjectsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Chunks", testChunksSliceDeleteAll)
	t.Run("Pies", testPiesSliceDeleteAll)
	t.Run("Projects", testProjectsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Chunks", testChunksExists)
	t.Run("Pies", testPiesExists)
	t.Run("Projects", testProjectsExists)
	t.Run("Roles", testRolesExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Chunks", testChunksFind)
	t.Run("Pies", testPiesFind)
	t.Run("Projects", testProjectsFind)
	t.Run("Roles", testRolesFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Chunks", testChunksBind)
	t.Run("Pies", testPiesBind)
	t.Run("Projects", testProjectsBind)
	t.Run("Roles", testRolesBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Chunks", testChunksOne)
	t.Run("Pies", testPiesOne)
	t.Run("Projects", testProjectsOne)
	t.Run("Roles", testRolesOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Chunks", testChunksAll)
	t.Run("Pies", testPiesAll)
	t.Run("Projects", testProjectsAll)
	t.Run("Roles", testRolesAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Chunks", testChunksCount)
	t.Run("Pies", testPiesCount)
	t.Run("Projects", testProjectsCount)
	t.Run("Roles", testRolesCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Chunks", testChunksHooks)
	t.Run("Pies", testPiesHooks)
	t.Run("Projects", testProjectsHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Chunks", testChunksInsert)
	t.Run("Chunks", testChunksInsertWhitelist)
	t.Run("Pies", testPiesInsert)
	t.Run("Pies", testPiesInsertWhitelist)
	t.Run("Projects", testProjectsInsert)
	t.Run("Projects", testProjectsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ChunkToUserUsingUser", testChunkToOneUserUsingUser)
	t.Run("ChunkToPieUsingPie", testChunkToOnePieUsingPie)
	t.Run("ProjectToPieUsingPie", testProjectToOnePieUsingPie)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("PieToPieChunks", testPieToManyPieChunks)
	t.Run("PieToUsers", testPieToManyUsers)
	t.Run("PieToPieProjects", testPieToManyPieProjects)
	t.Run("RoleToUsers", testRoleToManyUsers)
	t.Run("UserToChunks", testUserToManyChunks)
	t.Run("UserToPiePies", testUserToManyPiePies)
	t.Run("UserToRoles", testUserToManyRoles)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ChunkToUserUsingChunks", testChunkToOneSetOpUserUsingUser)
	t.Run("ChunkToPieUsingPieChunks", testChunkToOneSetOpPieUsingPie)
	t.Run("ProjectToPieUsingPieProjects", testProjectToOneSetOpPieUsingPie)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ChunkToPieUsingPieChunks", testChunkToOneRemoveOpPieUsingPie)
	t.Run("ProjectToPieUsingPieProjects", testProjectToOneRemoveOpPieUsingPie)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("PieToPieChunks", testPieToManyAddOpPieChunks)
	t.Run("PieToUsers", testPieToManyAddOpUsers)
	t.Run("PieToPieProjects", testPieToManyAddOpPieProjects)
	t.Run("RoleToUsers", testRoleToManyAddOpUsers)
	t.Run("UserToChunks", testUserToManyAddOpChunks)
	t.Run("UserToPiePies", testUserToManyAddOpPiePies)
	t.Run("UserToRoles", testUserToManyAddOpRoles)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("PieToPieChunks", testPieToManySetOpPieChunks)
	t.Run("PieToUsers", testPieToManySetOpUsers)
	t.Run("PieToPieProjects", testPieToManySetOpPieProjects)
	t.Run("RoleToUsers", testRoleToManySetOpUsers)
	t.Run("UserToPiePies", testUserToManySetOpPiePies)
	t.Run("UserToRoles", testUserToManySetOpRoles)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("PieToPieChunks", testPieToManyRemoveOpPieChunks)
	t.Run("PieToUsers", testPieToManyRemoveOpUsers)
	t.Run("PieToPieProjects", testPieToManyRemoveOpPieProjects)
	t.Run("RoleToUsers", testRoleToManyRemoveOpUsers)
	t.Run("UserToPiePies", testUserToManyRemoveOpPiePies)
	t.Run("UserToRoles", testUserToManyRemoveOpRoles)
}

func TestReload(t *testing.T) {
	t.Run("Chunks", testChunksReload)
	t.Run("Pies", testPiesReload)
	t.Run("Projects", testProjectsReload)
	t.Run("Roles", testRolesReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Chunks", testChunksReloadAll)
	t.Run("Pies", testPiesReloadAll)
	t.Run("Projects", testProjectsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Chunks", testChunksSelect)
	t.Run("Pies", testPiesSelect)
	t.Run("Projects", testProjectsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Chunks", testChunksUpdate)
	t.Run("Pies", testPiesUpdate)
	t.Run("Projects", testProjectsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Chunks", testChunksSliceUpdateAll)
	t.Run("Pies", testPiesSliceUpdateAll)
	t.Run("Projects", testProjectsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
