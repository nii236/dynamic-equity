// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Pie is an object representing the database table.
type Pie struct {
	ID                    int `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Currency              int `db:"currency" boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	NonCashMultiplier     int `db:"non_cash_multiplier" boil:"non_cash_multiplier" json:"non_cash_multiplier" toml:"non_cash_multiplier" yaml:"non_cash_multiplier"`
	CashMultiplier        int `db:"cash_multiplier" boil:"cash_multiplier" json:"cash_multiplier" toml:"cash_multiplier" yaml:"cash_multiplier"`
	CommissionRatePercent int `db:"commission_rate_percent" boil:"commission_rate_percent" json:"commission_rate_percent" toml:"commission_rate_percent" yaml:"commission_rate_percent"`
	RoyaltyRatePercent    int `db:"royalty_rate_percent" boil:"royalty_rate_percent" json:"royalty_rate_percent" toml:"royalty_rate_percent" yaml:"royalty_rate_percent"`
	FindersFeePercent     int `db:"finders_fee_percent" boil:"finders_fee_percent" json:"finders_fee_percent" toml:"finders_fee_percent" yaml:"finders_fee_percent"`

	R *pieR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L pieL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PieColumns = struct {
	ID                    string
	Currency              string
	NonCashMultiplier     string
	CashMultiplier        string
	CommissionRatePercent string
	RoyaltyRatePercent    string
	FindersFeePercent     string
}{
	ID:                    "id",
	Currency:              "currency",
	NonCashMultiplier:     "non_cash_multiplier",
	CashMultiplier:        "cash_multiplier",
	CommissionRatePercent: "commission_rate_percent",
	RoyaltyRatePercent:    "royalty_rate_percent",
	FindersFeePercent:     "finders_fee_percent",
}

// Generated where

var PieWhere = struct {
	ID                    whereHelperint
	Currency              whereHelperint
	NonCashMultiplier     whereHelperint
	CashMultiplier        whereHelperint
	CommissionRatePercent whereHelperint
	RoyaltyRatePercent    whereHelperint
	FindersFeePercent     whereHelperint
}{
	ID:                    whereHelperint{field: `id`},
	Currency:              whereHelperint{field: `currency`},
	NonCashMultiplier:     whereHelperint{field: `non_cash_multiplier`},
	CashMultiplier:        whereHelperint{field: `cash_multiplier`},
	CommissionRatePercent: whereHelperint{field: `commission_rate_percent`},
	RoyaltyRatePercent:    whereHelperint{field: `royalty_rate_percent`},
	FindersFeePercent:     whereHelperint{field: `finders_fee_percent`},
}

// PieRels is where relationship names are stored.
var PieRels = struct {
	PieChunks   string
	Users       string
	PieProjects string
}{
	PieChunks:   "PieChunks",
	Users:       "Users",
	PieProjects: "PieProjects",
}

// pieR is where relationships are stored.
type pieR struct {
	PieChunks   ChunkSlice
	Users       UserSlice
	PieProjects ProjectSlice
}

// NewStruct creates a new relationship struct
func (*pieR) NewStruct() *pieR {
	return &pieR{}
}

// pieL is where Load methods for each relationship are stored.
type pieL struct{}

var (
	pieColumns               = []string{"id", "currency", "non_cash_multiplier", "cash_multiplier", "commission_rate_percent", "royalty_rate_percent", "finders_fee_percent"}
	pieColumnsWithoutDefault = []string{"currency", "non_cash_multiplier", "cash_multiplier", "commission_rate_percent", "royalty_rate_percent", "finders_fee_percent"}
	pieColumnsWithDefault    = []string{"id"}
	piePrimaryKeyColumns     = []string{"id"}
)

type (
	// PieSlice is an alias for a slice of pointers to Pie.
	// This should generally be used opposed to []Pie.
	PieSlice []*Pie
	// PieHook is the signature for custom Pie hook methods
	PieHook func(boil.Executor, *Pie) error

	pieQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pieType                 = reflect.TypeOf(&Pie{})
	pieMapping              = queries.MakeStructMapping(pieType)
	piePrimaryKeyMapping, _ = queries.BindMapping(pieType, pieMapping, piePrimaryKeyColumns)
	pieInsertCacheMut       sync.RWMutex
	pieInsertCache          = make(map[string]insertCache)
	pieUpdateCacheMut       sync.RWMutex
	pieUpdateCache          = make(map[string]updateCache)
	pieUpsertCacheMut       sync.RWMutex
	pieUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pieBeforeInsertHooks []PieHook
var pieBeforeUpdateHooks []PieHook
var pieBeforeDeleteHooks []PieHook
var pieBeforeUpsertHooks []PieHook

var pieAfterInsertHooks []PieHook
var pieAfterSelectHooks []PieHook
var pieAfterUpdateHooks []PieHook
var pieAfterDeleteHooks []PieHook
var pieAfterUpsertHooks []PieHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Pie) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pieBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Pie) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pieBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Pie) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pieBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Pie) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pieBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Pie) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pieAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Pie) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range pieAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Pie) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range pieAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Pie) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range pieAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Pie) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range pieAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPieHook registers your hook function for all future operations.
func AddPieHook(hookPoint boil.HookPoint, pieHook PieHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pieBeforeInsertHooks = append(pieBeforeInsertHooks, pieHook)
	case boil.BeforeUpdateHook:
		pieBeforeUpdateHooks = append(pieBeforeUpdateHooks, pieHook)
	case boil.BeforeDeleteHook:
		pieBeforeDeleteHooks = append(pieBeforeDeleteHooks, pieHook)
	case boil.BeforeUpsertHook:
		pieBeforeUpsertHooks = append(pieBeforeUpsertHooks, pieHook)
	case boil.AfterInsertHook:
		pieAfterInsertHooks = append(pieAfterInsertHooks, pieHook)
	case boil.AfterSelectHook:
		pieAfterSelectHooks = append(pieAfterSelectHooks, pieHook)
	case boil.AfterUpdateHook:
		pieAfterUpdateHooks = append(pieAfterUpdateHooks, pieHook)
	case boil.AfterDeleteHook:
		pieAfterDeleteHooks = append(pieAfterDeleteHooks, pieHook)
	case boil.AfterUpsertHook:
		pieAfterUpsertHooks = append(pieAfterUpsertHooks, pieHook)
	}
}

// One returns a single pie record from the query.
func (q pieQuery) One(exec boil.Executor) (*Pie, error) {
	o := &Pie{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for pies")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Pie records from the query.
func (q pieQuery) All(exec boil.Executor) (PieSlice, error) {
	var o []*Pie

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Pie slice")
	}

	if len(pieAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Pie records in the query.
func (q pieQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count pies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pieQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if pies exists")
	}

	return count > 0, nil
}

// PieChunks retrieves all the chunk's Chunks with an executor via pie_id column.
func (o *Pie) PieChunks(mods ...qm.QueryMod) chunkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chunks\".\"pie_id\"=?", o.ID),
	)

	query := Chunks(queryMods...)
	queries.SetFrom(query.Query, "\"chunks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chunks\".*"})
	}

	return query
}

// Users retrieves all the user's Users with an executor.
func (o *Pie) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"pies_users\" on \"users\".\"id\" = \"pies_users\".\"user_id\""),
		qm.Where("\"pies_users\".\"pie_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// PieProjects retrieves all the project's Projects with an executor via pie_id column.
func (o *Pie) PieProjects(mods ...qm.QueryMod) projectQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"projects\".\"pie_id\"=?", o.ID),
	)

	query := Projects(queryMods...)
	queries.SetFrom(query.Query, "\"projects\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"projects\".*"})
	}

	return query
}

// LoadPieChunks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pieL) LoadPieChunks(e boil.Executor, singular bool, maybePie interface{}, mods queries.Applicator) error {
	var slice []*Pie
	var object *Pie

	if singular {
		object = maybePie.(*Pie)
	} else {
		slice = *maybePie.(*[]*Pie)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pieR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pieR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`chunks`), qm.WhereIn(`pie_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chunks")
	}

	var resultSlice []*Chunk
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chunks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chunks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chunks")
	}

	if len(chunkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PieChunks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chunkR{}
			}
			foreign.R.Pie = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PieID) {
				local.R.PieChunks = append(local.R.PieChunks, foreign)
				if foreign.R == nil {
					foreign.R = &chunkR{}
				}
				foreign.R.Pie = local
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pieL) LoadUsers(e boil.Executor, singular bool, maybePie interface{}, mods queries.Applicator) error {
	var slice []*Pie
	var object *Pie

	if singular {
		object = maybePie.(*Pie)
	} else {
		slice = *maybePie.(*[]*Pie)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pieR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pieR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".*, \"a\".\"pie_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"pies_users\" as \"a\" on \"users\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"pie_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []int
	for results.Next() {
		one := new(User)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Email, &one.Username, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.PiePies = append(foreign.R.PiePies, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.PiePies = append(foreign.R.PiePies, local)
				break
			}
		}
	}

	return nil
}

// LoadPieProjects allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pieL) LoadPieProjects(e boil.Executor, singular bool, maybePie interface{}, mods queries.Applicator) error {
	var slice []*Pie
	var object *Pie

	if singular {
		object = maybePie.(*Pie)
	} else {
		slice = *maybePie.(*[]*Pie)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pieR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pieR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`projects`), qm.WhereIn(`pie_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load projects")
	}

	var resultSlice []*Project
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice projects")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on projects")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for projects")
	}

	if len(projectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PieProjects = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &projectR{}
			}
			foreign.R.Pie = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PieID) {
				local.R.PieProjects = append(local.R.PieProjects, foreign)
				if foreign.R == nil {
					foreign.R = &projectR{}
				}
				foreign.R.Pie = local
				break
			}
		}
	}

	return nil
}

// AddPieChunks adds the given related objects to the existing relationships
// of the py, optionally inserting them as new records.
// Appends related to o.R.PieChunks.
// Sets related.R.Pie appropriately.
func (o *Pie) AddPieChunks(exec boil.Executor, insert bool, related ...*Chunk) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PieID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chunks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"pie_id"}),
				strmangle.WhereClause("\"", "\"", 2, chunkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PieID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &pieR{
			PieChunks: related,
		}
	} else {
		o.R.PieChunks = append(o.R.PieChunks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chunkR{
				Pie: o,
			}
		} else {
			rel.R.Pie = o
		}
	}
	return nil
}

// SetPieChunks removes all previously related items of the
// py replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Pie's PieChunks accordingly.
// Replaces o.R.PieChunks with related.
// Sets related.R.Pie's PieChunks accordingly.
func (o *Pie) SetPieChunks(exec boil.Executor, insert bool, related ...*Chunk) error {
	query := "update \"chunks\" set \"pie_id\" = null where \"pie_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PieChunks {
			queries.SetScanner(&rel.PieID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Pie = nil
		}

		o.R.PieChunks = nil
	}
	return o.AddPieChunks(exec, insert, related...)
}

// RemovePieChunks relationships from objects passed in.
// Removes related items from R.PieChunks (uses pointer comparison, removal does not keep order)
// Sets related.R.Pie.
func (o *Pie) RemovePieChunks(exec boil.Executor, related ...*Chunk) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PieID, nil)
		if rel.R != nil {
			rel.R.Pie = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("pie_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PieChunks {
			if rel != ri {
				continue
			}

			ln := len(o.R.PieChunks)
			if ln > 1 && i < ln-1 {
				o.R.PieChunks[i] = o.R.PieChunks[ln-1]
			}
			o.R.PieChunks = o.R.PieChunks[:ln-1]
			break
		}
	}

	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the py, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.PiePies appropriately.
func (o *Pie) AddUsers(exec boil.Executor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"pies_users\" (\"pie_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &pieR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				PiePies: PieSlice{o},
			}
		} else {
			rel.R.PiePies = append(rel.R.PiePies, o)
		}
	}
	return nil
}

// SetUsers removes all previously related items of the
// py replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PiePies's Users accordingly.
// Replaces o.R.Users with related.
// Sets related.R.PiePies's Users accordingly.
func (o *Pie) SetUsers(exec boil.Executor, insert bool, related ...*User) error {
	query := "delete from \"pies_users\" where \"pie_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUsersFromPiePiesSlice(o, related)
	if o.R != nil {
		o.R.Users = nil
	}
	return o.AddUsers(exec, insert, related...)
}

// RemoveUsers relationships from objects passed in.
// Removes related items from R.Users (uses pointer comparison, removal does not keep order)
// Sets related.R.PiePies.
func (o *Pie) RemoveUsers(exec boil.Executor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"pies_users\" where \"pie_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUsersFromPiePiesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Users {
			if rel != ri {
				continue
			}

			ln := len(o.R.Users)
			if ln > 1 && i < ln-1 {
				o.R.Users[i] = o.R.Users[ln-1]
			}
			o.R.Users = o.R.Users[:ln-1]
			break
		}
	}

	return nil
}

func removeUsersFromPiePiesSlice(o *Pie, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.PiePies {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.PiePies)
			if ln > 1 && i < ln-1 {
				rel.R.PiePies[i] = rel.R.PiePies[ln-1]
			}
			rel.R.PiePies = rel.R.PiePies[:ln-1]
			break
		}
	}
}

// AddPieProjects adds the given related objects to the existing relationships
// of the py, optionally inserting them as new records.
// Appends related to o.R.PieProjects.
// Sets related.R.Pie appropriately.
func (o *Pie) AddPieProjects(exec boil.Executor, insert bool, related ...*Project) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PieID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"projects\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"pie_id"}),
				strmangle.WhereClause("\"", "\"", 2, projectPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PieID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &pieR{
			PieProjects: related,
		}
	} else {
		o.R.PieProjects = append(o.R.PieProjects, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &projectR{
				Pie: o,
			}
		} else {
			rel.R.Pie = o
		}
	}
	return nil
}

// SetPieProjects removes all previously related items of the
// py replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Pie's PieProjects accordingly.
// Replaces o.R.PieProjects with related.
// Sets related.R.Pie's PieProjects accordingly.
func (o *Pie) SetPieProjects(exec boil.Executor, insert bool, related ...*Project) error {
	query := "update \"projects\" set \"pie_id\" = null where \"pie_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PieProjects {
			queries.SetScanner(&rel.PieID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Pie = nil
		}

		o.R.PieProjects = nil
	}
	return o.AddPieProjects(exec, insert, related...)
}

// RemovePieProjects relationships from objects passed in.
// Removes related items from R.PieProjects (uses pointer comparison, removal does not keep order)
// Sets related.R.Pie.
func (o *Pie) RemovePieProjects(exec boil.Executor, related ...*Project) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PieID, nil)
		if rel.R != nil {
			rel.R.Pie = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("pie_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PieProjects {
			if rel != ri {
				continue
			}

			ln := len(o.R.PieProjects)
			if ln > 1 && i < ln-1 {
				o.R.PieProjects[i] = o.R.PieProjects[ln-1]
			}
			o.R.PieProjects = o.R.PieProjects[:ln-1]
			break
		}
	}

	return nil
}

// Pies retrieves all the records using an executor.
func Pies(mods ...qm.QueryMod) pieQuery {
	mods = append(mods, qm.From("\"pies\""))
	return pieQuery{NewQuery(mods...)}
}

// FindPie retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPie(exec boil.Executor, iD int, selectCols ...string) (*Pie, error) {
	pieObj := &Pie{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pies\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, pieObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from pies")
	}

	return pieObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pie) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no pies provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pieColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pieInsertCacheMut.RLock()
	cache, cached := pieInsertCache[key]
	pieInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pieColumns,
			pieColumnsWithDefault,
			pieColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pieType, pieMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pieType, pieMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into pies")
	}

	if !cached {
		pieInsertCacheMut.Lock()
		pieInsertCache[key] = cache
		pieInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Pie.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pie) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pieUpdateCacheMut.RLock()
	cache, cached := pieUpdateCache[key]
	pieUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pieColumns,
			piePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update pies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, piePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pieType, pieMapping, append(wl, piePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update pies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for pies")
	}

	if !cached {
		pieUpdateCacheMut.Lock()
		pieUpdateCache[key] = cache
		pieUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pieQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for pies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for pies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PieSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), piePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, piePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in pie slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all pie")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Pie) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no pies provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pieColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pieUpsertCacheMut.RLock()
	cache, cached := pieUpsertCache[key]
	pieUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pieColumns,
			pieColumnsWithDefault,
			pieColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pieColumns,
			piePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert pies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(piePrimaryKeyColumns))
			copy(conflict, piePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pieType, pieMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pieType, pieMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert pies")
	}

	if !cached {
		pieUpsertCacheMut.Lock()
		pieUpsertCache[key] = cache
		pieUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Pie record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pie) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Pie provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), piePrimaryKeyMapping)
	sql := "DELETE FROM \"pies\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from pies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for pies")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pieQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no pieQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from pies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for pies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PieSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Pie slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(pieBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), piePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, piePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from pie slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for pies")
	}

	if len(pieAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pie) Reload(exec boil.Executor) error {
	ret, err := FindPie(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PieSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PieSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), piePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pies\".* FROM \"pies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, piePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in PieSlice")
	}

	*o = slice

	return nil
}

// PieExists checks if the Pie row exists.
func PieExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pies\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if pies exists")
	}

	return exists, nil
}
